/**
 * @(#)T002_DAO.java 2018/07/04.
 *
 * Copyright(C) 2016 by name CO., LTD.
 *
 * Last_Update 2018/07/10.
 * Version 1.00.
 */
package fis.cs.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import fjs.cs.dto.MSTCUSTOMER;

/**
 * T002_DAO
 * 
 * @version 1.0
 */
public class T002_DAO {
				
	/**
     * count MSTCUSTOMER user
     * 
     * @param conn: Connection info
     * @return connection
     */
	public static int countMSTCUSTOMER(Connection conn) {
		
		int result = 0;
		PreparedStatement pstm = null;
		//query sentences
		String sql ="SELECT count(*) FROM MSTCUSTOMER WHERE DELETE_YMD IS NULL";
		
		try {
			pstm = conn.prepareStatement(sql);
			ResultSet rs = pstm.executeQuery();
			while (rs.next()) {
				result = rs.getInt(1);
			}
		} catch (Exception ex) {
			//print error
			String error = ex.getMessage();
			System.out.println("Error: " + error);
		}
		return result;
	}
	
	/**
     * search list MSTCUSTOMER user with condition
     * 
     * @param conn: Connection info
     * @param start: start position
     * @param count: number  limit to display
     * @param CUSTOMER_NAME: CUSTOMER_NAME info
     * @param SEX: SEX info 
     * @param BIRTHDAYFROM: BIRTHDAYFROM info
     * @param BIRTHDAYTO: BIRTHDAYFRTO info
     * @param  ADRESS: ADDRESS info
     * @return listpAGE MSTCUSTOMER
     */
	public static List<MSTCUSTOMER> searchMSTCUSTOMERPage(int start, int count, Connection conn, String CUSTOMER_NAME, String SEX, String BIRTHDAYFROM, String BIRTHDAYTO, String ADDRESS) {
		List<MSTCUSTOMER> list = null;
		//list MSTCUSTOMER user with condition
		list = new ArrayList<MSTCUSTOMER>();
		List<MSTCUSTOMER> listPage = null;
		//list MSTCUSTOMER user with no condition
		listPage = new ArrayList<MSTCUSTOMER>();
		PreparedStatement pstm = null;
		//end position
		int end = start + count;
		int i = 0;

		// query sentences
		String sql = "SELECT * FROM MSTCUSTOMER WHERE DELETE_YMD IS NULL";
		if (CUSTOMER_NAME.equalsIgnoreCase("") == false) {
			sql = sql + " AND CUSTOMER_NAME LIKE '%" + CUSTOMER_NAME + "%'";
		}
		if (SEX.equalsIgnoreCase("") == false) {
			sql = sql + " AND SEX = '" + SEX + "'";
		}
		if (BIRTHDAYFROM.equalsIgnoreCase("") == false) {
			sql = sql + " AND BIRTHDAY >= '" + BIRTHDAYFROM + "'";
		}
		if (BIRTHDAYTO.equalsIgnoreCase("") == false) {
			sql = sql + " AND BIRTHDAY <= '" + BIRTHDAYTO + "'";
		}
		
		try {
			pstm = conn.prepareStatement(sql);
			ResultSet rs = pstm.executeQuery();
			while(rs.next()) {
					MSTCUSTOMER user = new MSTCUSTOMER();
					user.setCUSTOMER_ID(rs.getInt(1));
					user.setCUSTOMER_NAME(rs.getString(2));
					user.setSEX(rs.getString(3));
					user.setBIRTHDAY(rs.getString(4));
					user.setEMAIL(rs.getString(5));
					user.setADDRESS(rs.getString(6));
					list.add(user);
			}
			for(MSTCUSTOMER l: list){
				if (i >= start && i < end) {
					listPage.add(l);
				}
				i++;
				
			}
		} catch (Exception ex) {
			//print error
			String error = ex.getMessage();
			System.out.println("Error: " + error);
		}
		return listPage;
	}
	
	/**
     * count MSTCUSTOMER user with condition
     * 
     * @param conn: Connection info
     * @param start: start position
     * @param count: number  limit to display
     * @param CUSTOMER_NAME: CUSTOMER_NAME info
     * @param SEX: SEX info 
     * @param BIRTHDAYFROM: BIRTHDAYFROM info
     * @param BIRTHDAYTO: BIRTHDAYFRTO info
     * @param  ADRESS: ADDRESS info
     * @return result MSTCUSTOMER
     */
	public static int countMSTCUSTOMERPage(Connection conn, String CUSTOMER_NAME, String SEX, String BIRTHDAYFROM, String BIRTHDAYTO, String ADDRESS) {
		//number MSTCUSTOMER
		int result = 0;
		PreparedStatement pstm = null;
		// query sentences
		String sql = "SELECT count(*) FROM MSTCUSTOMER WHERE DELETE_YMD IS NULL";
		if (CUSTOMER_NAME.equalsIgnoreCase("") == false) {
			sql = sql + " AND CUSTOMER_NAME LIKE '%" + CUSTOMER_NAME + "%'";
		}
		if (SEX.equalsIgnoreCase("") == false) {
			sql = sql + " AND SEX = '" + SEX + "'";
		}
		if (BIRTHDAYFROM.equalsIgnoreCase("") == false) {
			sql = sql + " AND BIRTHDAY >= '" + BIRTHDAYFROM + "'";
		}
		if (BIRTHDAYTO.equalsIgnoreCase("") == false) {
			sql = sql + " AND BIRTHDAY <= '" + BIRTHDAYTO + "'";
		}
		try {
			pstm = conn.prepareStatement(sql);
			ResultSet rs = pstm.executeQuery();
			while (rs.next()) {
				result = rs.getInt(1);
			}
		} catch (Exception ex) {
			//print error
			String error = ex.getMessage();
			System.out.println("Error: " + error);
		}
		return result;
	}
	
	/**
     * delete MSTCUSTOMER  
     * 
     * @param dbURL: database's url
     * @param id: MSTCUSTOMER INFO 
     * @param date: DELETE_YMD info
     * @return result
     */
	public static int deleteMSTCUSTOMER(Connection conn, String id, String date) {
		//set default value to return if error
		int result = -1;
		PreparedStatement pstm = null;
		// query sentences
		String sql = "UPDATE MSTCUSTOMER SET DELETE_YMD = '"+ date+ "' WHERE DELETE_YMD IS NULL AND CUSTOMER_ID = " + id ;
		
		try {
			pstm = conn.prepareStatement(sql);
			result = pstm.executeUpdate();
			
		} catch (Exception ex) {
			//print error
			String error = ex.getMessage();
			System.out.println("Error: " + error);
		}
		return result;
	}
	
}
